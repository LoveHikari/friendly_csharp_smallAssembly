<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNet.Utilities</name>
    </assembly>
    <members>
        <member name="T:DotNet.Utilities.Chinese2Spell">
            <summary>
            汉字转拼音静态类,包括功能全拼和缩写，方法全部是静态的
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Chinese2Spell.pyValue">
            <summary>
            汉字的机内码数组
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Chinese2Spell.pyName">
            <summary>
            机内码对应的拼音数组
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.Convert(System.String)">
            <summary>
            汉字转拼音，每个汉字首字母大写
            例：一二三  ====》YiErSan
            </summary>
            <param name="hzString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.ConvertWithBlank(System.String)">
            <summary>
            汉字转拼音，每个汉字首字母大写，汉字拼音之间相隔一个空格
            例：一二三  ====》Yi Er San
            </summary>
            <param name="hzString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.ConvertWithSplitChar(System.String,System.String)">
            <summary>
            在汉字之间插入字符串
            例：一二三，11  ====》一11二11三
            </summary>
            <param name="hzString">汉字字符串</param>
            <param name="splitChar">需要在汉字之间插入的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.GetSpellStringLower(System.String)">
            <summary>
            汉字转拼音缩写 (字符串) (小写)
            </summary>
            <param name="str">要转换的汉字字符串</param>
            <returns>拼音缩写</returns> 
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.GetSpellStringLowerSplitWithBlank(System.String)">
            <summary>
            汉字转拼音缩写 (字符串) (小写) (空格间隔)
            </summary>
            <param name="str">要转换的汉字字符串</param>
            <returns>拼音缩写</returns> 
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.GetSpellStringSupper(System.String)">
            <summary>
            汉字转拼音缩写 (大写)
            </summary>
            <param name="str">要转换的汉字字符串</param>
            <returns>拼音缩写</returns>
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.GetSpellStringSupperSplitWithBlank(System.String)">
            <summary>
            汉字转拼音缩写  (字符串)(大写)(空格间隔)
            </summary>
            <param name="str">要转换的汉字字符串</param>
            <returns>拼音缩写</returns>
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.GetSpellCharSupper(System.String)">
            <summary>
            取单个字符的拼音声母(大写)
            </summary>
            <param name="c">要转换的单个汉字</param>
            <returns>拼音声母(大写)</returns>
        </member>
        <member name="M:DotNet.Utilities.Chinese2Spell.GetSpellCharLower(System.String)">
            <summary>
            取单个字符的拼音声母(小写)
            </summary>
            <param name="c">要转换的单个汉字</param>
            <returns>拼音声母(小写)</returns>
        </member>
        <member name="T:DotNet.Utilities.ChineseNum">
            <summary>
            转中文数字
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.GetChineseNum(System.String)">
            <summary>
            获得中文数字
            例：222   ====》二百二十二
            </summary>
            <param name="p_num"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.GetUpperMoney(System.Double)">
            <summary>
            获得中文大写金额
            </summary>
            <param name="p_Money"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.ConvertSum(System.String)">
            转换数字金额主函数（包括小数） 
            
            数字字符串 
            转换成中文大写后的字符串或者出错信息提示字符串 
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.IsPositveDecimal(System.String)">
            判断是否是正数字字符串 
            
            判断字符串 
            如果是数字，返回true，否则返回false 
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.ConvertData(System.String)">
            
            转换数字（整数） 
            
            需要转换的整数数字字符串 
            转换成中文大写后的字符串 
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.ConvertXiaoShu(System.String)">
            转换数字（小数部分） 
            
            需要转换的小数部分数字字符串 
            转换成中文大写后的字符串 
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.ConvertDigit(System.String)">
            
            转换数字 
            
            转换的字符串（四位以内） 
            
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.Convert4Digit(System.String)">
            
            转换四位数字 
            
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.Convert3Digit(System.String)">
            
            转换三位数字 
            
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.Convert2Digit(System.String)">
            
            转换二位数字 
            
        </member>
        <member name="M:DotNet.Utilities.ChineseNum.ConvertChinese(System.String)">
            <summary>
            转中文数字
            </summary>
            <param name="str">0~9</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.CodeCommon">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CodeCommon.SqlType2CsharpType(System.Data.SqlDbType)">
            <summary>
            SqlDbType转换为C#数据类型
            </summary>
            <param name="sqlType"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.CodeCommon.SqlTypeString2SqlType(System.String)">
            <summary>
            sql server数据类型（如：varchar）转换为SqlDbType类型
            </summary>
            <param name="sqlTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.CodeCommon.SqlTypeString2CsharpType(System.String)">
            <summary>
            sql server中的数据类型，转换为C#中的类型类型
            </summary>
            <param name="sqlTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.CodeCommon.SqlTypeString2CsharpTypeString(System.String)">
            <summary>
            将sql server中的数据类型，转化为C#中的类型的字符串
            </summary>
            <param name="sqlTypeString"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.ConvertHelper">
            <summary>
            处理数据类型转换，数制转换、编码转换相关的类
            </summary>    
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.RepairZero(System.String,System.Int32)">
            <summary>
            指定字符串的固定长度，如果字符串小于固定长度，
            则在字符串的前面补足零
            </summary>
            <param name="text">原始字符串</param>
            <param name="limitedLength">字符串的固定长度</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定字符集将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.BytesToInt32(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="data">需要转换成整数的byte数组</param>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.XmlToDataSet(System.String)">
            <summary>
            将XML字符创转换为DataSet
            </summary>
            <param name="xmlData">XML字符</param>
            <returns>DataSet:相同结点生成一个DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.Cast``1(System.Object,System.Func{``0})">
            <summary>
            匿名类型转强类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">匿名对象</param>
            <param name="func"></param>
            <para>Cast(new { Name = "Tom", Age = 25 }, () => new { Name = "", Age = 0 });</para>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ConvertHelper.Cast``1(System.Object,``0)">
            <summary>
            匿名类型转强类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="obj">匿名对象</param>
            <param name="type">匿名类型</param>
            <para>Cast(new { Name = "Tom", Age = 25 }, ew { Name = "", Age = 0 });</para>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.CookieHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.#ctor(System.String)">
            <summary>
            默认过期时间为关闭浏览器
            <param name="cookieObj">cookie对象名称</param>
            </summary>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.#ctor(System.String,System.DateTime)">
            <summary>
            构造函数，初始化时传入过期时间
            </summary>
            <param name="cookieObj">cookie对象名称</param>
            <param name="expires">过期时间</param>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.SetCookie(System.String,System.String)">
            <summary>
            添加一个Cookie
            </summary>
            <param name="cookiename">cookie名</param>
            <param name="cookievalue">cookie值</param>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.SetCookie(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            添加一组Cookie
            </summary>
            <param name="idi">cookie键值对</param>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.GetCookieValue(System.String,System.String)">
            <summary>
            获取指定Cookie值
            </summary>
            <param name="cookies">cookie对象</param>
            <param name="cookiename">cookiename</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.GetCookieValues(System.String)">
            <summary>
            获取cookie对象全部值
            </summary>
            <param name="cookies">cookie对象名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.GetCookieValueListDictionary(System.String)">
            <summary>
            获取cookie对象全部值,以键值对形式
            </summary>
            <param name="cookies">cookie对象名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.UpdateCookie(System.String,System.String)">
            <summary>
            修改cookie
            </summary>
            <param name="cookiename"></param>
            <param name="cookievalue"></param>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.DeleteCookie(System.String)">
            <summary>
            删除cookie
            </summary>
            <param name="cookiename"></param>
        </member>
        <member name="M:DotNet.Utilities.CookieHelper.DeleteCookies(System.String)">
            <summary>
            删除全部cookie
            </summary>
            <param name="cookies">cookie对象名称</param>
        </member>
        <member name="T:DotNet.Utilities.DateTimeHelper">
            <summary>
            DateTime 帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ReturnDateWeek(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            获取当日所在的周的开始日期和结束日期
            </summary>
            <param name="dtNow">当前日期（年月日）</param>
            <param name="dtWeekSt">开始日期</param>
            <param name="dtWeekEd">结束日期</param>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ReturnDateMonth(System.Int32,System.String@,System.String@)">
            <summary>
            返回当月的第一天和最后一天
            </summary>
            <param name="month">当前月份</param>
            <param name="firstDay">第一天</param>
            <param name="lastDay">最后一天</param>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.GetWeekOfYear(System.DateTime)">
            <summary>
            取指定日期是一年中的第几周
            </summary>
            <param name="dtNow">给定的日期(年月日)</param>
            <returns>一年中的第几周</returns>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.GetWeekDay(System.DateTime)">
            <summary>
            取指定日期是一年中的第几周,并返回该周第一天和最后一天
            </summary>
            <param name="dtNow">给定的日期(年月日)</param>
            <returns>GetWeekDay[0]=周次;GetWeekDay[1]=该周第一天;GetWeekDay[2]=该周最后一天</returns>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.GetWeekOfMonth(System.DateTime)">
            <summary>
            某日期是当月的第几周
            </summary>
            <param name="day">给定的日期(年月日)</param>
            <returns>第几周</returns>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.GetWeekOfDay(System.DateTime)">
            <summary>
            某日期是当月的第几周,并返回该周的第一天和最后一天
            </summary>
            <param name="day">给定日期（年月日）</param>
            <returns>GetWeekOfDay[0]=周次;GetWeekOfDay[1]=该周第一天;GetWeekOfDay[2]=该周最后一天</returns>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ReturnDatetMonth(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            获取当日所在的月的开始日期和结束日期
            </summary>
            <param name="dtNow">当前日期</param>
            <param name="dtMonthSt">月初</param>
            <param name="dtMonthEd">月末</param>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ReturnDatetQuarter(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            获取当日所在的季度的开始日期和结束日期
            </summary>
            <param name="dtNow">当前日期</param>
            <param name="dtQuarterSt">本季度初</param>
            <param name="dtQuarterEd">本季度末</param>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ReturnDatetYear(System.DateTime,System.DateTime@,System.DateTime@)">
            <summary>
            获取当日所在的年的开始日期和结束日期
            </summary>
            <param name="dtNow">当前日期</param>
            <param name="dtYearSt">年初</param>
            <param name="dtYearEd">年末</param>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ChineseByEnWeek(System.DayOfWeek)">
            <summary>
            英文转化为中文的星期几
            </summary>
            <param name="week">星期</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.NumberByEnWeek(System.DayOfWeek)">
            <summary>
            英文转化为数字的星期（1~7）
            </summary>
            <param name="week"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ConvertDateTime(System.String)">
            <summary>
            时间戳转为C#格式时间
            </summary>
            <param name="timeStamp">Unix时间戳</param>
            <returns>时间</returns>
        </member>
        <member name="M:DotNet.Utilities.DateTimeHelper.ConvertDateTimeInt(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="time">时间</param>
            <returns>Unix时间戳</returns>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.DBParam">
            <summary>
            DbCommand 的参数
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.DBParam.#ctor">
            <summary>
            DbCommand 的参数
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.DBParam.#ctor(System.String,System.Object,System.Data.DbType)">
            <summary>
            DbCommand 的参数
            </summary>
            <param name="fields">参数名称</param>
            <param name="dbvalue">参数值</param>
            <param name="dbtype">参数类型</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.DBParam.#ctor(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            DbCommand 的参数
            </summary>
            <param name="fields">参数名称</param>
            <param name="dbvalue">参数值</param>
            <param name="dbtype">参数类型</param>
            <param name="size">参数最大长度</param>
        </member>
        <member name="P:DotNet.Utilities.DBHelper.DBParam.FieldName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:DotNet.Utilities.DBHelper.DBParam.DbValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="P:DotNet.Utilities.DBHelper.DBParam.DbType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:DotNet.Utilities.DBHelper.DBParam.Size">
            <summary>
            参数最大长度
            </summary>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.CrDB">
            <summary>
            跨数据库的操作类，父类，不可new
            </summary>
        </member>
        <member name="F:DotNet.Utilities.DBHelper.CrDB._providerName">
            <summary>
            数据提供者
            </summary>
        </member>
        <member name="F:DotNet.Utilities.DBHelper.CrDB._connectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.#ctor">
            <summary>
            使该类不可new
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.GetDbProviderFactory">
            <summary>
            返回数据工厂
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.CreateConnection">
            <summary>
            创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.CreateCommand(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            创建执行命令对象
            </summary>
            <param name="sql"></param>
            <param name="cmdType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.CreateAdapter(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            创建数据适配器
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>数据适配器实例</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.GetConnStr(System.String)">
            <summary>
            从XML文件获取数据库连接
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.CreateDell(System.String)">
            <summary>
            创建默认dell.xml
            </summary>
            <param name="path">dell.xml绝对路径</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.GetConnectionString(System.String)">
            <summary>
            获得连接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteNonQuery(System.String)">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteNonQuery(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
             <summary>
            批量执行SQL语句 
             </summary>
             <param name="sqlList">SQL列表</param>
             <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteScalar(System.String)">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteScalar(System.String,System.Data.CommandType)">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteScalar(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteReader(System.String)">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteReader(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteReader(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteReader(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataSet(System.String)">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataSet(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataSet(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataSet(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataSet(System.String,System.Int32,System.Int32)">
            <summary>
            执行查询,并以DataSet返回指定记录的结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startIndex">开始索引</param>
            <param name="recordCount">显示记录</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataView(System.String)">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataView(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataView(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataView(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataView(System.String,System.Int32,System.Int32)">
            <summary>
            执行查询,并以DataView返回指定记录的结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startIndex">开始索引</param>
            <param name="recordCount">显示记录</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataTable(System.String)">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataTable(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataTable(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataTable(System.String,System.Int32,System.Int32)">
            <summary>
            执行查询,并以DataTable返回指定记录的结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startIndex">开始索引</param>
            <param name="recordCount">显示记录</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.CrDB.ExecuteDataTable(System.String,System.Int32)">
            <summary>
            执行查询,返回以空行填充的指定条数记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sizeCount">显示记录条数</param>
            <returns>DataTable</returns>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.DBHelper">
            <summary>
            数据工厂类,实现了跨数据库的操作
            </summary>
        </member>
        <member name="F:DotNet.Utilities.DBHelper.DBHelper._configString">
            <summary>
            Webconfig配置连接字符串
            </summary>
        </member>
        <member name="P:DotNet.Utilities.DBHelper.DBHelper.ConfigString">
            <summary>
            属性,Webconfig配置连接字符串
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.DBHelper.#ctor">
            <summary>
            数据工厂类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.DBHelper.#ctor(System.String)">
            <summary>
            数据工厂类
            </summary>
            <param name="configString">web.config 关键字</param>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.DBHelper2">
            <summary>
            数据工厂类,实现了跨数据库的操作
            </summary>
        </member>
        <member name="F:DotNet.Utilities.DBHelper.DBHelper2._dbName">
            <summary>
            dell.xml 关键字
            </summary>
        </member>
        <member name="P:DotNet.Utilities.DBHelper.DBHelper2.DbName">
            <summary>
            属性,dell.xml 关键字
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.DBHelper2.#ctor">
            <summary>
            数据工厂类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.DBHelper2.#ctor(System.String)">
            <summary>
            数据工厂类
            </summary>
            <param name="dbName">dell.xml 关键字</param>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.IDBHelper">
            <summary>
            跨数据库的操作类的接口
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteNonQuery(System.String)">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType)">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteNonQuery(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteNonQuery(System.Collections.Generic.List{System.String})">
             <summary>
            批量执行SQL语句 
             </summary>
             <param name="sqlList">SQL列表</param>
             <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回受影响的记录行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>受影响记录行数</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteScalar(System.String)">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteScalar(System.String,System.Data.CommandType)">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteScalar(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行非查询语句,并返回首行首列的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>Object</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteReader(System.String)">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteReader(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteReader(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteReader(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataReader返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataSet(System.String)">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataSet(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataSet(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataSet(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataSet返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataSet(System.String,System.Int32,System.Int32)">
            <summary>
            执行查询,并以DataSet返回指定记录的结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startIndex">开始索引</param>
            <param name="recordCount">显示记录</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataView(System.String)">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataView(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataView(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataView(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataView返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataView(System.String,System.Int32,System.Int32)">
            <summary>
            执行查询,并以DataView返回指定记录的结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startIndex">开始索引</param>
            <param name="recordCount">显示记录</param>
            <returns>DataView</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataTable(System.String)">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataTable(System.String,System.Data.CommandType)">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataTable(System.String,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataTable(System.String,System.Data.CommandType,System.Collections.Generic.List{DotNet.Utilities.DBHelper.DBParam})">
            <summary>
            执行查询，并以DataTable返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="cmdtype">命令类型</param>
            <param name="parameters">参数</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataTable(System.String,System.Int32,System.Int32)">
            <summary>
            执行查询,并以DataTable返回指定记录的结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="startIndex">开始索引</param>
            <param name="recordCount">显示记录</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.IDBHelper.ExecuteDataTable(System.String,System.Int32)">
            <summary>
            执行查询,返回以空行填充的指定条数记录集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="sizeCount">显示记录条数</param>
            <returns>DataTable</returns>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.MySqlHelper">
            <summary>
            mysql 数据库操作类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlNonQuery(System.String)">
            <summary>
            执行Sql语句，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlNonQuery(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行参数化的Sql语句，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecProcNonQuery(System.String,System.Object[])">
            <summary>
            执行存储过程，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlScalar(System.String)">
            <summary>
            执行Sql语句，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlScalar(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行参数化的Sql语句，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecProcScalar(System.String,System.Object[])">
            <summary>
            执行存储过程，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlReader(System.String,System.Action{MySql.Data.MySqlClient.MySqlDataReader})">
            <summary>
            执行Sql语句，获取SqlDataReader。
            </summary>
            <param name="sql">要执行的sql语句</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlReader(System.String,System.Action{MySql.Data.MySqlClient.MySqlDataReader},MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行参数化Sql语句，获取SqlDataReader。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecProcReader(System.String,System.Action{MySql.Data.MySqlClient.MySqlDataReader},System.Object[])">
            <summary>
            执行存储过程，获取SqlDataReader。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlList``1(System.String,System.Func{MySql.Data.MySqlClient.MySqlDataReader,``0})">
            <summary>
            执行Sql语句，返回强类型T的List列表。
            </summary>
            <param name="sql">要执行的sql语句</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlList``1(System.String,System.Func{MySql.Data.MySqlClient.MySqlDataReader,``0},MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行参数化Sql语句，返回强类型T的List列表。 
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecProcList``1(System.String,System.Func{MySql.Data.MySqlClient.MySqlDataReader,``0},System.Object[])">
            <summary>
            执行存储过程，返回强类型T的List列表。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlDataSet(System.String)">
            <summary>
            执行Sql语句，返回DataSet。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlDataSet(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行参数化Sql语句，返回DataSet。 
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecProcDataSet(System.String,System.Object[])">
            <summary>
            执行存储过程，返回DataSet。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlDataTable(System.String)">
            <summary>
            执行Sql语句，返回DataTable。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecSqlDataTable(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            执行参数化Sql语句，返回DataTable。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.RunProcedure(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.RunProcedure(System.String,System.Data.IDataParameter[],System.String,System.Int32)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecProcDataTable(System.String,System.Object[])">
            <summary>
            执行存储过程，返回DataTable。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecBatch(System.Action{DotNet.Utilities.DBHelper.MySqlHelper})">
            <summary>
            执行批量Sql语句。
            </summary>
            <param name="batch">要执行的批量Sql代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.MySqlHelper.ExecTransaction(System.Action{DotNet.Utilities.DBHelper.MySqlHelper,MySql.Data.MySqlClient.MySqlTransaction})">
            <summary>
            执行事务代码。 
            </summary>
            <param name="block">要执行的事务代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.SqliteHelper">
            <summary>
            sqlite数据库操作类
            </summary>
        </member>
        <member name="F:DotNet.Utilities.DBHelper.SqliteHelper.Instance">
            <summary>
            公共实例
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connString">config文件中的配置节名称</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlNonQuery(System.String)">
            <summary>
            执行Sql语句，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlNonQuery(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行参数化的Sql语句，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecProcNonQuery(System.String,System.Object[])">
            <summary>
            执行存储过程，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlScalar(System.String)">
            <summary>
            执行Sql语句，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlScalar(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行参数化的Sql语句，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecProcScalar(System.String,System.Object[])">
            <summary>
            执行存储过程，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlReader(System.String,System.Action{System.Data.SQLite.SQLiteDataReader})">
            <summary>
            执行Sql语句，获取SqlDataReader。
            </summary>
            <param name="sql">要执行的sql语句</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlReader(System.String,System.Action{System.Data.SQLite.SQLiteDataReader},System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行参数化Sql语句，获取SqlDataReader。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecProcReader(System.String,System.Action{System.Data.SQLite.SQLiteDataReader},System.Object[])">
            <summary>
            执行存储过程，获取SqlDataReader。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlList``1(System.String,System.Func{System.Data.SQLite.SQLiteDataReader,``0})">
            <summary>
            执行Sql语句，返回强类型T的List列表。
            </summary>
            <param name="sql">要执行的sql语句</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlList``1(System.String,System.Func{System.Data.SQLite.SQLiteDataReader,``0},System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行参数化Sql语句，返回强类型T的List列表。 
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecProcList``1(System.String,System.Func{System.Data.SQLite.SQLiteDataReader,``0},System.Object[])">
            <summary>
            执行存储过程，返回强类型T的List列表。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlDataSet(System.String)">
            <summary>
            执行Sql语句，返回DataSet。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlDataSet(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行参数化Sql语句，返回DataSet。 
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecProcDataSet(System.String,System.Object[])">
            <summary>
            执行存储过程，返回DataSet。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlDataTable(System.String)">
            <summary>
            执行Sql语句，返回DataTable。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecSqlDataTable(System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行参数化Sql语句，返回DataTable。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.RunProcedure(System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.RunProcedure(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.RunProcedure(System.String,System.Data.IDataParameter[],System.String,System.Int32)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecProcDataTable(System.String,System.Object[])">
            <summary>
            执行存储过程，返回DataTable。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecBatch(System.Action{DotNet.Utilities.DBHelper.SqliteHelper})">
            <summary>
            执行批量Sql语句。
            </summary>
            <param name="batch">要执行的批量Sql代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqliteHelper.ExecTransaction(System.Action{DotNet.Utilities.DBHelper.SqliteHelper,System.Data.SQLite.SQLiteTransaction})">
            <summary>
            执行事务代码。 
            </summary>
            <param name="block">要执行的事务代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="T:DotNet.Utilities.DBHelper.SqlHelper">
            <summary>
            sql server数据库操作类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlNonQuery(System.String)">
            <summary>
            执行Sql语句，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行参数化的Sql语句，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecProcNonQuery(System.String,System.Object[])">
            <summary>
            执行存储过程，返回受影响的行数。用于执行insert、update、delete等非查询语句。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlScalar(System.String)">
            <summary>
            执行Sql语句，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行参数化的Sql语句，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecProcScalar(System.String,System.Object[])">
            <summary>
            执行存储过程，返回查询结果集中的第一行第一列的值。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlReader(System.String,System.Action{System.Data.SqlClient.SqlDataReader})">
            <summary>
            执行Sql语句，获取SqlDataReader。
            </summary>
            <param name="sql">要执行的sql语句</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlReader(System.String,System.Action{System.Data.SqlClient.SqlDataReader},System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行参数化Sql语句，获取SqlDataReader。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecProcReader(System.String,System.Action{System.Data.SqlClient.SqlDataReader},System.Object[])">
            <summary>
            执行存储过程，获取SqlDataReader。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="block">要使用SqlDataReader的代码块（方法）/委托/Lambda语句块</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlList``1(System.String,System.Func{System.Data.SqlClient.SqlDataReader,``0})">
            <summary>
            执行Sql语句，返回强类型T的List列表。
            </summary>
            <param name="sql">要执行的sql语句</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlList``1(System.String,System.Func{System.Data.SqlClient.SqlDataReader,``0},System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行参数化Sql语句，返回强类型T的List列表。 
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecProcList``1(System.String,System.Func{System.Data.SqlClient.SqlDataReader,``0},System.Object[])">
            <summary>
            执行存储过程，返回强类型T的List列表。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="selector">用于生成列表中类型为T的元素的方法/委托/Lambda表达式等</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlDataSet(System.String)">
            <summary>
            执行Sql语句，返回DataSet。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行参数化Sql语句，返回DataSet。 
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecProcDataSet(System.String,System.Object[])">
            <summary>
            执行存储过程，返回DataSet。 
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlDataTable(System.String)">
            <summary>
            执行Sql语句，返回DataTable。
            </summary>
            <param name="sql">要执行的sql语句</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecSqlDataTable(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行参数化Sql语句，返回DataTable。
            </summary>
            <param name="sql">要执行的包含参数的sql语句</param>
            <param name="values">Sql语句中表示参数的SqlParameter对象</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.RunProcedure(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.RunProcedure(System.String,System.Data.IDataParameter[],System.String,System.Int32)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecProcDataTable(System.String,System.Object[])">
            <summary>
            执行存储过程，返回DataTable。
            </summary>
            <param name="procName">要执行的存储过程的名字</param>
            <param name="parameters">存储过程的参数</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecBatch(System.Action{DotNet.Utilities.DBHelper.SqlHelper})">
            <summary>
            执行批量Sql语句。
            </summary>
            <param name="batch">要执行的批量Sql代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="M:DotNet.Utilities.DBHelper.SqlHelper.ExecTransaction(System.Action{DotNet.Utilities.DBHelper.SqlHelper,System.Data.SqlClient.SqlTransaction})">
            <summary>
            执行事务代码。 
            </summary>
            <param name="block">要执行的事务代码块（方法）/委托/Lambda语句块</param>
        </member>
        <member name="T:DotNet.Utilities.DEncryptUtils">
            <summary>
            加解密工具类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.DESEncrypt(System.String)">
            <summary>
            DES加密
            </summary>
            <param name="strSource"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.DESEncrypt(System.String,System.Byte[])">
            <summary>
            DES加密
            </summary>
            <param name="strSource">待加密字串</param>
            <param name="key">32位Key值</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.DESDecrypt(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="strSource"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.DESDecrypt(System.String,System.Byte[])">
            <summary>
            DES解密
            </summary>
            <param name="strSource">待解密的字串</param>
            <param name="key">32位Key值</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Encrypt3DES(System.String)">
            <summary>
            默认密钥和矢量的3DES加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Encrypt3DES(System.String,System.String,System.String)">
            <summary>
            带指定密钥和矢量的3DES加密
            </summary>
            <param name="str"></param>
            <param name="sKey">32个字符</param>
            <param name="sIV">12个字符</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Decrypt3DES(System.String)">
            <summary>
            默认密钥和矢量的3DES解密
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Decrypt3DES(System.String,System.String,System.String)">
            <summary>
            带指定密钥和矢量的3DES解密
            </summary>
            <param name="Value"></param>
            <param name="sKey">32个字符</param>
            <param name="sIV">12个字符</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.UrlEncode(System.String)">
            <summary>
            编码Url地址
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.UrlDecode(System.String)">
            <summary>
            解码Url地址
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Base64Encrypt(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Base64Decrypt(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密
            </summary>
            <param name="input">需要解密的字符串</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.DESEncrypt(System.String,System.String,System.String)">
            <summary>
            DES加密
            </summary>
            <param name="data">加密数据</param>
            <param name="key">8位字符的密钥字符串</param>
            <param name="iv">8位字符的初始化向量字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.DESDecrypt(System.String,System.String,System.String)">
            <summary>
            DES解密
            </summary>
            <param name="data">解密数据</param>
            <param name="key">8位字符的密钥字符串(需要和加密时相同)</param>
            <param name="iv">8位字符的初始化向量字符串(需要和加密时相同)</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.MD5Encrypt(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.MD5Encrypt(System.String,System.Text.Encoding)">
            <summary>
            MD5加密
            </summary>
            <param name="input">需要加密的字符串</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.MD5Encrypt(System.IO.Stream)">
            <summary>
            MD5对文件流加密
            </summary>
            <param name="sr"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DEncryptUtils.MD5Encrypt16(System.String,System.Text.Encoding)">
            <summary>
            MD5加密(返回16位加密串)
            </summary>
            <param name="input"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.DistinctExtensions">
            <summary>
            Distinct 扩展类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.DistinctExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Distinct lambda 扩展，可以使用一个简单的 lambda 作为参数
            调用示例：var p1 = products.Distinct(p => p.ID);
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="source"></param>
            <param name="keySelector">lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.DistinctExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Distinct lambda 扩展，可以使用一个简单的 lambda 作为参数
            调用示例：var p1 = products.Distinct(p => p.ID, StringComparer.CurrentCultureIgnoreCase);
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="source"></param>
            <param name="keySelector">lambda表达式</param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.ExChangeChinese">
            <summary>
            中文处理
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ExChangeChinese.Simplified2Traditional(System.String)">
            <summary>
            简体转繁体
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ExChangeChinese.Traditional2Simplified(System.String)">
            <summary>
            繁体转简体
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.FTPHelper">
            <summary>
            ftp操作类
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPHelper._ftpUri">
            <summary>
            ftp当前目录地址
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPHelper._ftpUserId">
            <summary>
            用户名
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPHelper._ftpServerIp">
            <summary>
            FTP连接地址
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPHelper._ftpPassword">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:DotNet.Utilities.FTPHelper._ftpRemotePath">
            <summary>
            FTP连接成功后的当前目录
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            连接FTP服务器
            </summary>
            <param name="ftpServerIp">FTP连接地址，可以带端口</param>
            <param name="ftpRemotePath">指定FTP连接成功后的当前目录, 如果不指定即默认为根目录，前后不需要/</param>
            <param name="ftpUserId">用户名</param>
            <param name="ftpPassword">密码</param>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.Upload(System.String)">
            <summary>
            上传
            </summary>
            <param name="localFilePath">本地文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.Download(System.String,System.String)">
            <summary>
            下载
            </summary>
            <param name="localFileDir">要保存到的本地文件目录</param>
            <param name="fileName">要下载文件名</param>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetFilesDetailList">
            <summary>
            获取当前目录下明细(包含文件和文件夹)
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetAllList(System.String)">
            <summary>
            获取FTP文件列表(包括文件夹)
            </summary>
            <param name="requedstPath">服务器下的相对路径，不需要首尾的/</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetFileList">
            <summary>
            获取当前目录下文件列表(不包括文件夹)  
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.FileExist(System.String)">
            <summary>
            判断当前目录下指定的文件是否存在  
            </summary>
            <param name="remoteFileName">远程文件名</param>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.MakeDir(System.String)">
            <summary>  
            创建文件夹  
            </summary>   
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GetFileSize(System.String)">
            <summary>  
            获取指定文件大小  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.ReName(System.String,System.String)">
            <summary>  
            更改文件名  
            </summary> 
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.MovieFile(System.String,System.String)">
            <summary>  
            移动文件  
            </summary>  
        </member>
        <member name="M:DotNet.Utilities.FTPHelper.GotoDirectory(System.String,System.Boolean)">
            <summary>
            切换当前目录
            </summary>
            <param name="dir">远程目录</param>
            <param name="isRoot">true:绝对路径 false:相对路径</param>
        </member>
        <member name="T:DotNet.Utilities.HttpDownload">
            <summary>
            http下载类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HttpDownload.HttpDownloadFile(System.String,System.String)">
            <summary>
            Http下载文件
            </summary>
            <param name="url">下载地址</param>
            <param name="path">保存路径</param>
            <returns>cookie</returns>
        </member>
        <member name="T:DotNet.Utilities.ImageHelper">
            <summary>
            图片处理类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.GetPictureData(System.String)">
            <summary>  
            图片转二进制  
            </summary>  
            <param name="imagePath">图片地址</param>  
            <returns>二进制</returns>  
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.GetImage(System.String)">
            <summary>
            获取Image对象
            </summary>
            <param name="imagePath">图片地址</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.BytesToImage(System.Byte[])">
            <summary>
            二进制数组转图片对象
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.ImageToBytes(System.Drawing.Image)">
            <summary>
            图片转二进制
            </summary>
            <param name="image">图片对象</param>  
            <returns>二进制</returns>  
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.ImageToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            图片转二进制
            </summary>
            <param name="image">图片对象</param>
            <param name="imageFormat">后缀名</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.BitmapToImage(System.Drawing.Bitmap)">
            <summary>
            Bitmap转Image
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.BytesToBitmap(System.Byte[])">
            <summary>
            byte[] 转换 Bitmap
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.BitmapToBytes(System.Drawing.Bitmap)">
            <summary>
            Bitmap转byte[]
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.ReadPictureDegree(System.String)">
            <summary>  
            获取原图旋转角度(IOS和Android相机拍的照片)  
            </summary>  
            <param name="path">图片路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.ReadPictureDegree(System.Drawing.Image)">
            <summary>  
            获取原图旋转角度(IOS和Android相机拍的照片)  
            </summary>  
            <param name="image">图片对象</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.KiRotate(System.String,System.String,System.Drawing.RotateFlipType)">
            <summary>
            旋转
            </summary>
            <param name="oldPath">原图路径</param>
            <param name="newPath">要保存的路径</param>
            <param name="rotateFlipType">图像旋转量</param>  
            <returns></returns>  
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.KiRotate(System.Drawing.Image,System.String,System.Drawing.RotateFlipType)">
            <summary>
            旋转
            </summary>
            <param name="original">原图对象</param>
            <param name="newPath">要保存的路径</param>
            <param name="rotateFlipType">图像旋转量</param>  
            <returns></returns>  
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resize图片
            </summary>
            <param name="original">原始Bitmap</param>
            <param name="width">新的宽度</param>
            <param name="height">新的高度</param>
            <param name="Mode">保留着，暂时未用</param>
            <returns>处理以后的图片</returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.ResizeImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            缩放图片
            </summary>
            <param name="original">原始图片</param>
            <param name="width">新的宽度</param>
            <param name="height">新的高度</param>
            <returns>处理以后的图片</returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.FillerImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            缩放并补白图片
            </summary>
            <param name="original">原始图片</param>
            <param name="width">新的宽度</param>
            <param name="height">新的高度</param>
            <param name="margin">补白宽度</param>
            <returns>处理以后的图片</returns>
        </member>
        <member name="M:DotNet.Utilities.ImageHelper.KiCut(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            剪裁 -- 用GDI+
            </summary>
            <param name="b">原始Bitmap</param>
            <param name="startX">开始坐标X</param>
            <param name="startY">开始坐标Y</param>
            <param name="iWidth">宽度</param>
            <param name="iHeight">高度</param>
            <returns>剪裁后的Bitmap</returns>
        </member>
        <member name="T:DotNet.Utilities.IniHelper">
            <summary>
            读写ini文件，需要绝对路径
            </summary>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            声明INI文件的写操作函数 
            </summary>
            <param name="section">配置节</param>
            <param name="key">键名</param>
            <param name="val">键值</param>
            <param name="filePath">路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            声明INI文件的读操作函数
            </summary>
            <param name="section">配置节</param>
            <param name="key">键名</param>
            <param name="def"></param>
            <param name="retVal"></param>
            <param name="size"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.GetPrivateProfileSectionNames(System.Byte[],System.Int32,System.String)">
            <summary>
            读取一INI文件中所有的配置节名。
            </summary>
            <param name="retVal">指向缓冲区的指针，用于接收与指定文件相关联的段名称。 缓冲区填充有一个或多个空终止字符串; 最后一个字符串后跟第二个空字符。</param>
            <param name="size">retVal参数指向的缓冲区的大小（以字符为单位）</param>
            <param name="filePath">初始化文件的名称。 如果此参数为NULL，该函数将搜索Win.ini文件。 如果此参数不包含文件的完整路径，系统将在Windows目录中搜索该文件。</param>
            <returns>指定复制到指定缓冲区的字符数，不包括终止空字符。 如果缓冲区大小不足以包含与指定初始化文件关联的所有段名称，则返回值等于由size指定的大小减去2。</returns>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.GetPrivateProfileSection(System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            检索INI文件的指定配置节的的所有键和值。
            </summary>
            <param name="section">配置节名</param>
            <param name="retVal">指向缓冲区的指针，用于接收与命名段相关联的键名称和值对。 缓冲区填充有一个或多个空终止字符串; 最后一个字符串后跟第二个空字符。</param>
            <param name="size">retVal参数指向的缓冲区的大小（以字符为单位）</param>
            <param name="filePath">初始化文件的名称。 如果此参数为NULL，该函数将搜索Win.ini文件。 如果此参数不包含文件的完整路径，系统将在Windows目录中搜索该文件。</param>
            <returns>返回值指定复制到缓冲区的字符数，不包括终止空字符。 如果缓冲区不足以包含与命名段相关联的所有键名和值对，则返回值等于size减2。</returns>
        </member>
        <member name="P:DotNet.Utilities.IniHelper.Keys">
            <summary>
            获取包含INI中配置节的ICollection
            </summary>
        </member>
        <member name="P:DotNet.Utilities.IniHelper.Values">
            <summary>
            获取包含INI中键值对的ICollection
            </summary>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.#ctor">
            <summary>
            构造函数，之后需要调用Load 方法
            </summary>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="iniPath">INI文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.Load(System.String)">
            <summary>
            加载文件
            </summary>
            <param name="iniPath">文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.Add(System.Object,System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            重写父类的方法
            </summary>
            <param name="key">配置节</param>
            <param name="value">键值对</param>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.Add(System.Object,System.Object,System.Object)">
            <summary>
            添加
            </summary>
            <param name="section">配置节</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.Save">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:DotNet.Utilities.IniHelper.SaveAs(System.String)">
            <summary>
            另保存文件，文件存在则覆盖
            </summary>
            <param name="iniPath"></param>
        </member>
        <member name="T:DotNet.Utilities.IntegerHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.IntegerHelper.IsOdd(System.Int32)">
            <summary>
            是否是奇数
            </summary>
            <param name="n"></param>
            <returns>true：是奇数</returns>
        </member>
        <member name="M:DotNet.Utilities.IntegerHelper.IsPrime(System.Int32)">
            <summary>
            判断给定的数字是否为素数(质数)
            </summary>
            <param name="num">true为质数</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.IntegerHelper.Parse(System.String)">
            <summary>
            将数字的字符串形式转换为等效的32位有符号整数，转换失败返回0
            </summary>
            <param name="s">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.JsonHelper">
            <summary>
            json 帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToJson(System.Object)">
            <summary>
            返回对象序列化
            </summary>
            <param name="obj">源对象</param>   
            <returns>json数据</returns>   
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToJson(System.Object,System.Int32)">
            <summary>
            控制深度,返回对象序列化
            </summary>
            <param name="obj">源对象</param>
            <param name="recursionDepth">深度</param>
            <returns>json数据</returns>
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToJson(System.Data.DataTable)">
            <summary>   
            DataTable转为json   
            </summary>   
            <param name="dt">DataTable</param>   
            <returns>json数据</returns>   
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToJsonTotal(System.Data.DataTable)">
            <summary>   
            DataTable转为json,不带索引   
            </summary>   
            <param name="dt">DataTable</param>
            <returns>json数据</returns>   
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToJsonDrv(System.Data.DataTable)">
            <summary>   
            DataTable转为json   
            </summary>   
            <param name="dt">DataTable</param>   
            <returns>json数据</returns>   
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToJsonp(System.Data.DataTable)">
            <summary>   
            DataTable转为jsonp,autocomplete插件需要使用的jsonp格式   
            </summary>   
            <param name="dtResult">DataTable</param>   
            <returns>jsonp数据</returns>   
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>   
            将实体类转换成DataTable   
            </summary>   
            <typeparam name="T">类型</typeparam>   
            <param name="objlist">实体</param>   
            <returns>DataTable</returns>   
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.Obj2Base64String(System.Object)">
            <summary>
            
            </summary>
            <param name="serializableObject"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.Base64String2Obj(System.String)">
            <summary>
            Deserializes base64 string to object.返序列化string 为 object
            </summary>
            <param name="deserializedString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.ToDataTable(System.String)">
            <summary>
            Json 字符串 转换为 DataTable数据集合
            </summary>
            <param name="json">Json 字符串</param>
            <returns>DataTable数据集合</returns>
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.DataTableToJson(System.Data.DataTable)">
            <summary>
            DataTable转json
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.StringFormat(System.String,System.Type)">
            <summary>      
            格式化字符型、日期型、布尔型      
            </summary>      
            <param name="str"></param>      
            <param name="type"></param>      
            <returns></returns>      
        </member>
        <member name="M:DotNet.Utilities.JsonHelper.String2Json(System.String)">
            <summary>      
            过滤特殊字符      
            </summary>      
            <param name="s"></param>      
            <returns></returns>      
        </member>
        <member name="T:DotNet.Utilities.MicrosoftExcelHelper">
            <summary>
            MicrosoftExcelHelper 的摘要说明：一个C#操作Excel类，功能比较全。
            需要引入Microsoft.Office.Interop.Excel.dll和COM组件：Microsoft Office 16.0 Object Library
            office版本不同，引用的版本也不同
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.#ctor">
            <summary>
            坐标从1，1开始
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.Create">
            <summary>
            创建一个Excel对象
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.Open(System.String)">
            <summary>
            打开一个Excel文件
            </summary>
            <param name="fileName">文件地址</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.GetSheet(System.String)">
            <summary>
            //获取一个工作表
            </summary>
            <param name="wsn">工作表名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.AddSheet(System.String)">
            <summary>
            添加一个工作表
            </summary>
            <param name="wsn">工作表名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.DelSheet(System.String)">
            <summary>
            删除一个工作表
            </summary>
            <param name="wsn"></param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.ReNameSheet(System.String,System.String)">
            <summary>
            重命名一个工作表
            </summary>
            <param name="oldSheetName">原来工作表名称</param>
            <param name="newSheetName">新工作表名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.ReNameSheet(Microsoft.Office.Interop.Excel.Worksheet,System.String)">
            <summary>
            重命名一个工作表
            </summary>
            <param name="sheet">原工作表对象</param>
            <param name="newSheetName">新工作表名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.SetCellValue(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32,System.Object)">
            <summary>
            设置单元格的值
            </summary>
            <param name="ws">工作表对象</param>
            <param name="x">X行</param>
            <param name="y">Y列</param>
            <param name="value">value 值</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.SetCellValue(System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            设置单元格的值
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="x">X行</param>
            <param name="y">Y列</param>
            <param name="value">value 值</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.SetCellProperty(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,Microsoft.Office.Interop.Excel.Constants,Microsoft.Office.Interop.Excel.Constants,System.Boolean)">
            <summary>
            设置一个单元格的属性：字体，大小，颜色，对齐方式
            </summary>
            <param name="ws">工作表对象</param>
            <param name="startx">开始x行</param>
            <param name="starty">开始y列</param>
            <param name="endx">结束x行</param>
            <param name="endy">结束y列</param>
            <param name="size">字体大小</param>
            <param name="name">字体型号</param>
            <param name="color">颜色</param>
            <param name="horizontalAlignment">对齐方式</param>
            <param name="bold">是否加粗</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.SetCellProperty(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,DotNet.Utilities.MicrosoftExcelHelper.ColorIndex,Microsoft.Office.Interop.Excel.Constants,System.Boolean)">
            <summary>
            设置一个单元格的属性：大小，字体，颜色，对齐方式
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="startx">开始x行</param>
            <param name="starty">开始y列</param>
            <param name="endx">结束x行</param>
            <param name="endy">结束y列</param>
            <param name="size">字体大小如：12</param>
            <param name="name">字体名称如：宋体</param>
            <param name="color">颜色索引</param>
            <param name="horizontalAlignment">对齐方式</param>
            <param name="bold">是否加粗</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.SetCellsBackColor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,DotNet.Utilities.MicrosoftExcelHelper.ColorIndex)">
            <summary>
            单元格背景色及填充方式
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="startRow">起始行</param>
            <param name="startColumn">起始列</param>
            <param name="endRow">结束行</param>
            <param name="endColumn">结束列</param>
            <param name="color">颜色索引</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.SetCellsBorders(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            单元格边框
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="startRow">起始行</param>
            <param name="startColumn">起始列</param>
            <param name="endRow">结束行</param>
            <param name="endColumn">结束列</param>
            <param name="lineStyle">边框样式</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.UniteCells(Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            合并单元格
            </summary>
            <param name="ws">工作表对象</param>
            <param name="x1">起始行</param>
            <param name="y1">起始列</param>
            <param name="x2">结束行</param>
            <param name="y2">结束列</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.UniteCells(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            合并单元格
            </summary>
            <param name="ws">工作表名称</param>
            <param name="x1">起始行</param>
            <param name="y1">起始列</param>
            <param name="x2">结束行</param>
            <param name="y2">结束列</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertTable(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>
            将内存中数据表格插入到Excel指定工作表的指定位置 为在使用模板时控制格式时使用
            </summary>
            <param name="dt">数据</param>
            <param name="wsn">工作表名称</param>
            <param name="startX">开始x坐标</param>
            <param name="startY">开始y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertTable(System.Data.DataTable,Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32)">
            <summary>
            将内存中数据表格插入到Excel指定工作表的指定位置
            </summary>
            <param name="dt">数据</param>
            <param name="ws">工作表对象</param>
            <param name="startX">开始x坐标</param>
            <param name="startY">开始y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.AddTable(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>
            将内存中数据表格添加到Excel指定工作表的指定位置
            </summary>
            <param name="dt">数据</param>
            <param name="wsn">工作表名称</param>
            <param name="startX">开始x坐标</param>
            <param name="startY">开始y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.AddTable(System.Data.DataTable,Microsoft.Office.Interop.Excel.Worksheet,System.Int32,System.Int32)">
            <summary>
            将内存中数据表格添加到Excel指定工作表的指定位置
            </summary>
            <param name="dt">数据</param>
            <param name="ws">工作表对象</param>
            <param name="startX">开始x坐标</param>
            <param name="startY">开始y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertPictures(System.String,System.String)">
            <summary>
            插入图片操作
            </summary>
            <param name="filename">图片地址</param>
            <param name="wsn">工作表名称</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertPictures(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入图片操作
            </summary>
            <param name="filename">图片地址</param>
            <param name="wsn">工作表名称</param>
            <param name="height">高度</param>
            <param name="width">宽度</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertPictures(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            插入图片操作
            </summary>
            <param name="filename">图片地址</param>
            <param name="wsn">工作表名称</param>
            <param name="left">左边位置</param>
            <param name="top">顶部位置</param>
            <param name="height">高度</param>
            <param name="width">宽度</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertActiveChart(Microsoft.Office.Interop.Excel.XlChartType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Office.Interop.Excel.XlRowCol)">
            <summary>
            插入图表操作
            </summary>
            <param name="chartType">图表类型</param>
            <param name="wsn">工作表名称</param>
            <param name="dataSourcesX1">数据来源开始x行</param>
            <param name="dataSourcesY1">数据来源开始y列</param>
            <param name="dataSourcesX2">数据来源结束x行</param>
            <param name="dataSourcesY2">数据来源结束y列</param>
            <param name="chartDataType">图表数据类型</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.Save">
            <summary>
            保存文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.SaveAs(System.Object)">
            <summary>
            文档另存为
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.Close">
            <summary>
            关闭一个Excel对象，销毁对象
            </summary>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.GetMaxCount(System.String)">
            <summary>
            获得最大行列数
            </summary>
            <param name="wsn">工作表名称</param>
            <returns>rowsCount: 最大行,colsCount: 最大列</returns>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.GetMaxRowsCount(System.String)">
            <summary>
            获得最大行数
            </summary>
            <param name="wsn">工作表名称</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.GetMaxColsCount(System.String)">
            <summary>
            获得最大列数
            </summary>
            <param name="wsn">工作表名称</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.GetCellsValue(System.String,System.Int32,System.Int32)">
            <summary>
            获得单元格文本
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="x">x行</param>
            <param name="y">y列</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertRows(System.String,System.Int32)">
            <summary>
            指定位置插入一行，其他下移
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="x">指定x行</param>
        </member>
        <member name="M:DotNet.Utilities.MicrosoftExcelHelper.InsertColumns(System.String,System.Int32)">
            <summary>
            指定位置插入一列，其余右移
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="y">指定y列</param>
        </member>
        <member name="T:DotNet.Utilities.MicrosoftExcelHelper.ColorIndex">
            <summary>
            常用颜色定义,对就Excel中颜色名
            </summary>
        </member>
        <member name="T:DotNet.Utilities.MicrosoftExcelHelper.SaveAsFileFormat">
            <summary>
            HTML，CSV，TEXT，EXCEL，XML
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ObjectHelper">
            <summary>
            Object 帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ObjectHelper.ToString2(System.Object)">
            <summary>
            获取字符串 不返回null值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ObjectHelper.ToString2(System.Object,System.String)">
            <summary>
            获取字符串 不返回null值
            </summary>
            <param name="value"></param>
            <param name="s">指定为null时返回的值</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ObjectHelper.ToInt32(System.Object)">
            <summary>
            转换为等效的32位有符号整数，转换失败返回0
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.ObjectHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            转换为等效的32位有符号整数，转换失败返回指定的数字
            </summary>
            <param name="input"></param>
            <param name="i">指定转换失败时返回的值</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.OCR.AspriseOcr">
            <summary>
            Asprise 方式识别
            </summary>
        </member>
        <member name="M:DotNet.Utilities.OCR.AspriseOcr.OCR(System.String,System.Int32)">
            <summary>
            精确图像文件路径及格式，该功能将以字符串形式返回图片内容，如果类型参数设置为-1，Asprise OCR将自动决定文件格式。Asprise
            OCR支持的图片格式较广泛，如.bmp,.ico,.jpg,.jpeg,.png,.pic,.jng,.gif等多达30种图片格式。
            </summary>
            <param name="imagePath">图片文件路径</param>
            <param name="imageFileType">如果类型参数设置为-1，Asprise OCR将自动决定文件格式</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.OCR.AspriseOcr.OCRpart(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            图片的部分区域实施OCR任务，其中(startX, startY)对应图像的左上方区域，(width, height)对应区域的宽度和高度。
            </summary>
            <param name="imagePath">图片文件路径</param>
            <param name="imageFileType">如果类型参数设置为-1，Asprise OCR将自动决定文件格式</param>
            <param name="startX">开始x坐标，为0即可</param>
            <param name="startY">开始y坐标，为0即可</param>
            <param name="width">图片的宽</param>
            <param name="height">图片的高</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.OCR.AspriseOcr.OCRBarCodes(System.String,System.Int32)">
            <summary>
            识别图片中的条形码，当有多个条形码时，会以换行符分割
            </summary>
            <param name="imagePath"></param>
            <param name="imageFileType"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.OCR.AspriseOcr.OCRpartBarCodes(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            识别图片中条形码的部分区域
            </summary>
            <param name="imagePath"></param>
            <param name="imageFileType"></param>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.OCR.AspriseOcr.DiscernImage(System.String)">
            <summary>
            识别图片，无法识别中文
            </summary>
            <param name="imgPath">图片路径</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.PropertiesHelper">
            <summary>
            Properties配置文件帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PropertiesHelper.#ctor">
            <summary>
            构造函数，之后需要调用Load 方法
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PropertiesHelper.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filePath">要读写的properties文件名</param>
        </member>
        <member name="M:DotNet.Utilities.PropertiesHelper.Add(System.Object,System.Object)">
            <summary>
            重写父类的方法
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:DotNet.Utilities.PropertiesHelper.Keys">
            <summary>
            获取包含Properties中键的ICollection
            </summary>
        </member>
        <member name="P:DotNet.Utilities.PropertiesHelper.Values">
            <summary>
            获取包含Properties中值的ICollection
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PropertiesHelper.Load(System.String)">
            <summary>
            加载文件
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.PropertiesHelper.Save">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PropertiesHelper.SaveAs(System.String)">
            <summary>
            另保存文件，文件存在则覆盖，注释的key为#
            </summary>
            <param name="filePath">要保存的文件的路径</param>
        </member>
        <member name="T:DotNet.Utilities.PublicInfo">
            <summary>
            公共工具类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PublicInfo.GetLocation(System.String,System.String@,System.String@)">
            <summary>
            获取经纬度
            </summary>
            <param name="address">地址</param>
            <param name="lng">经度</param>
            <param name="lat">纬度</param>
        </member>
        <member name="M:DotNet.Utilities.PublicInfo.GetGreatestCommonDivisor3(System.Int32,System.Int32)">
            <summary>
            辗转相除法求最大公约数
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PublicInfo.GetGreatestCommonDivisor2(System.Int32,System.Int32)">
            <summary>
            更相减损术求最大公约数
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PublicInfo.GetGreatestCommonDivisor(System.Int32,System.Int32)">
            <summary>
            更相减损术与移位结合求最大公约数
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
            <remarks>参考：http://blog.jobbole.com/106315/?utm_source=blog.jobbole.com&amp;utm_medium=relatedPosts </remarks>
        </member>
        <member name="M:DotNet.Utilities.PublicInfo.OnStartup">
            <summary>
            禁止程序重复打开
            <remarks>http://blog.csdn.net/lc547913923/article/details/46557777</remarks>
            </summary>
        </member>
        <member name="T:DotNet.Utilities.RandomHelper">
            <summary>
            随机数帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.NextNumber">
            <summary>
            返回非负随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.NextNumber(System.Int32,System.Int32)">
            <summary>
            返回一个指定范围内的随机数
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.NextNumber(System.Int32)">
            <summary>
            返回一个小于所指定最大值的非负随机数
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.Next">
            <summary> 
            产生一个非负数的乱数 
            </summary> 
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.Next(System.Int32)">
            <summary> 
            产生一个非负数且最大值在 max 以下的乱数 
            </summary> 
            <param name="max">最大值</param> 
        </member>
        <member name="M:DotNet.Utilities.RandomHelper.Next(System.Int32,System.Int32)">
            <summary> 
            产生一个非负数且最小值在 min 以上最大值在 max 以下的乱数 
            </summary> 
            <param name="min">最小值</param> 
            <param name="max">最大值</param> 
        </member>
        <member name="M:DotNet.Utilities.RandomExtensions.RandomNumber(System.Random,System.Int32,System.Boolean)">
            <summary>
            生成随机数字
            </summary>
            <param name="ran"></param>
            <param name="length">生成长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:DotNet.Utilities.RandomExtensions.Str(System.Random,System.Int32,System.Boolean)">
            <summary>
            生成随机字母与数字
            </summary>
            <param name="ran"></param>
            <param name="length">生成长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:DotNet.Utilities.RandomExtensions.Str_char(System.Random,System.Int32,System.Boolean)">
            <summary>
            生成随机纯字母随机数
            </summary>
            <param name="ran"></param>
            <param name="length">生成长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
        </member>
        <member name="M:DotNet.Utilities.RandomExtensions.IntArray(System.Random,System.Int32,System.Boolean)">
            <summary>
            生成一组不重复的int数组
            </summary>
            <param name="ran"></param>
            <param name="length">数组长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RandomExtensions.IntArray(System.Random,System.Int32,System.Int32,System.Boolean)">
            <summary>
            生成一组不重复的int数组
            </summary>
            <param name="ran"></param>
            <param name="max">数组中数字的上限</param>
            <param name="length">数组长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RandomExtensions.IntArray(System.Random,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            生成一组不重复的int数组
            </summary>
            <param name="ran"></param>
            <param name="min">数组中数字的下限</param>
            <param name="max">数组中数字的上限</param>
            <param name="length">数组长度</param>
            <param name="sleep">是否要在生成前将当前线程阻止以避免重复</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.RegexUtil">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsChineseCh(System.String)">
            <summary>
            判断输入的字符串只包含汉字
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsNumeric(System.String)">
            <summary>
            判断字符串是否是数字
            </summary>
            <param name="str"></param>
            <returns>如果是则返回true，不是则返回false</returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsPhone(System.String)">
            <summary>
            匹配3位或4位区号的电话号码，其中区号可以用小括号括起来，
            也可以不用，区号与本地号间可以用连字号或空格间隔，
            也可以没有间隔
            \(0\d{2}\)[- ]?\d{8}|0\d{2}[- ]?\d{8}|\(0\d{3}\)[- ]?\d{7}|0\d{3}[- ]?\d{7}
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsMobilePhone(System.String)">
            <summary>
            判断输入的字符串是否是一个合法的手机号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsNumber(System.String)">
            <summary>
            判断输入的字符串只包含数字
            可以匹配整数和浮点数
            ^-?\d+$|^(-?\d+)(\.\d+)?$
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsNotNagtive(System.String)">
            <summary>
            匹配非负整数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsUint(System.String)">
            <summary>
            匹配正整数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsEnglisCh(System.String)">
            <summary>
            判断输入的字符串字包含英文字母
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsEmail(System.String)">
            <summary>
            判断输入的字符串是否是一个合法的Email地址
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsNumAndEnCh(System.String)">
            <summary>
            判断输入的字符串是否只包含数字和英文字母
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsURL(System.String)">
            <summary>
            判断输入的字符串是否是一个超链接
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsIPv4(System.String)">
            <summary>
            判断输入的字符串是否是表示一个IP地址
            </summary>
            <param name="input">被比较的字符串</param>
            <returns>是IP地址则为True</returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsIPV6(System.String)">
            <summary>
            判断输入的字符串是否是合法的IPV6 地址
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.GetCount(System.String)">
            <summary>
            计算字符串的字符长度，一个汉字字符将被计算为两个字符
            </summary>
            <param name="input">需要计算的字符串</param>
            <returns>返回字符串的长度</returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.IsMatch(System.String,System.String)">
            <summary>
            调用Regex中IsMatch函数实现一般的正则表达式匹配
            </summary>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <param name="input">要搜索匹配项的字符串</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false。</returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.Replace(System.String,System.String,System.String)">
            <summary>
            从输入字符串中的第一个字符开始，用替换字符串替换指定的正则表达式模式的所有匹配项。
            </summary>
            <param name="pattern">模式字符串</param>
            <param name="input">输入字符串</param>
            <param name="replacement">用于替换的字符串</param>
            <returns>返回被替换后的结果</returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.Split(System.String,System.String)">
            <summary>
            在由正则表达式模式定义的位置拆分输入字符串。
            </summary>
            <param name="pattern">模式字符串</param>
            <param name="input">输入字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.RegexUtil.GetStringCount(System.String,System.String)">
            <summary>
            判断字符串compare 在 input字符串中出现的次数
            </summary>
            <param name="input">源字符串</param>
            <param name="compare">用于比较的字符串</param>
            <returns>字符串compare 在 input字符串中出现的次数</returns>
        </member>
        <member name="T:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance">
            <summary>
            
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._ArrChar1">
            <summary>
            字符串1
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._ArrChar2">
            <summary>
            字符串2
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._Result">
            <summary>
            统计结果
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._ComputeTimes">
            <summary>
            计算次数
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._Matrix">
            <summary>
            算法矩阵
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._Column">
            <summary>
            矩阵列数
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance._Row">
            <summary>
            矩阵行数
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.StringComputeInit(System.String,System.String)">
            <summary>
            初始化算法基本信息
            </summary>
            <param name="str1">字符串1</param>
            <param name="str2">字符串2</param>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.Compute">
            <summary>
            计算相似度
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.LD(System.String,System.String)">
            <summary>
            两字符串相似度计算方法(编辑距离算法LevenshteinDistance又称EditDistance)
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.SpeedyCompute">
            <summary>
            计算相似度（不记录比较时间）
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.Compute(System.String,System.String)">
            <summary>
            计算相似度
            </summary>
            <param name="str1">字符串1</param>
            <param name="str2">字符串2</param>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.SpeedyCompute(System.String,System.String)">
            <summary>
            计算相似度
            </summary>
            <param name="str1">字符串1</param>
            <param name="str2">字符串2</param>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.InitMatrix">
            <summary>
            初始化矩阵的第一行和第一列
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Similarity.LevenshteinDistance.LevenshteinDistance.Minimum(System.Int32,System.Int32,System.Int32)">
            <summary>
            取三个数中的最小值
            </summary>
            <param name="First"></param>
            <param name="Second"></param>
            <param name="Third"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.Similarity.LevenshteinDistance.Result">
            <summary>
            计算结果
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.Result.Rate">
            <summary>
            相似度
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.Result.ComputeTimes">
            <summary>
            对比次数
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.Result.UseTime">
            <summary>
            使用时间
            </summary>
        </member>
        <member name="F:DotNet.Utilities.Similarity.LevenshteinDistance.Result.Difference">
            <summary>
            差异
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Similarity.SimHash.Analysers.SimHashAnalyser">
            <summary>
            SimHash计算文本相似度类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Similarity.SimHash.Analysers.SimHashAnalyser.GetLikenessValue(System.String,System.String)">
            <summary>
            获得相似度
            </summary>
            <param name="needle">待比较文本</param>
            <param name="haystack">模板文本</param>
            <returns>相似度</returns>
        </member>
        <member name="M:DotNet.Utilities.Similarity.SimHash.Analysers.SimHashAnalyser.DoHashTokens(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            转hash令牌
            </summary>
            <param name="tokens">令牌</param>
            <returns>hash令牌</returns>
        </member>
        <member name="T:DotNet.Utilities.Similarity.SimHash.Interfaces.IAnalyser">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Similarity.SimHash.Interfaces.IAnalyser.GetLikenessValue(System.String,System.String)">
            <summary>
            获得相似度
            </summary>
            <param name="needle">待比较文本</param>
            <param name="haystack">模板文本</param>
            <returns>相似度</returns>
        </member>
        <member name="T:DotNet.Utilities.Similarity.SimHash.Interfaces.ITokeniser">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Similarity.SimHash.Tokenisers.FixedSizeStringTokeniser">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotNet.Utilities.Similarity.SimHash.Tokenisers.OverlappingStringTokeniser">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotNet.Utilities.SpireExcelHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.#ctor">
            <summary>
            坐标从1，1开始
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.Create">
            <summary>
            创建一个Excel对象
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.Open(System.String)">
            <summary>
            打开一个Excel文件
            </summary>
            <param name="fileName">文件地址</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.GetSheet(System.String)">
            <summary>
            //获取一个工作表
            </summary>
            <param name="sheetName">工作表名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.AddSheet(System.String)">
            <summary>
            添加一个工作表
            </summary>
            <param name="sheetName">工作簿名称</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.DelSheet(System.String)">
            <summary>
            删除一个工作表
            </summary>
            <param name="sheetName"></param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.ReNameSheet(System.String,System.String)">
            <summary>
            重命名一个工作表一
            </summary>
            <param name="oldSheetName"></param>
            <param name="newSheetName"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.ReNameSheet(Spire.Xls.Worksheet,System.String)">
            <summary>
            重命名一个工作表二
            </summary>
            <param name="sheet"></param>
            <param name="newSheetName"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellValue(Spire.Xls.Worksheet,System.Int32,System.Int32,System.String)">
            <summary>
            设置单元格的值
            </summary>
            <param name="ws">工作表</param>
            <param name="x">X行Y列</param>
            <param name="y">X行Y列</param>
            <param name="value">value 值</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellValue(Spire.Xls.Worksheet,System.String,System.String)">
            <summary>
            设置单元格的值
            </summary>
            <param name="ws">工作表</param>
            <param name="range">单元格位置：A1</param>
            <param name="value">value 值</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellValue(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            设置单元格的值
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="x">X行Y列</param>
            <param name="y">X行Y列</param>
            <param name="value">value 值</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellValue(System.String,System.String,System.String)">
            <summary>
            设置单元格的值
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="range">单元格位置：A1</param>
            <param name="value">value 值</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellProperty(Spire.Xls.Worksheet,System.String,System.String,System.Int32,System.String,System.Drawing.Color,Spire.Xls.HorizontalAlignType,Spire.Xls.VerticalAlignType)">
            <summary>
            设置一个单元格的属性(字体，大小，颜色，对齐方式)
            </summary>
            <param name="ws">工作表的名称</param>
            <param name="startRange">开始单元格</param>
            <param name="endRange">结束单元格</param>
            <param name="size">字体大小：12</param>
            <param name="name">字体名称：宋体</param>
            <param name="color">字体颜色：System.Drawing.Color.White</param>
            <param name="horizontalAlignment">文本水平对齐方式：HorizontalAlignType.Center</param>
            <param name="verticalAlignment">文本垂直对齐方式：VerticalAlignType.Center</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellProperty(System.String,System.String,System.String,System.Int32,System.String,System.Drawing.Color,Spire.Xls.HorizontalAlignType,Spire.Xls.VerticalAlignType,System.Boolean)">
            <summary>
            设置一个单元格的属性：大小，字体，颜色，对齐方式
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="startRange">开始单元格</param>
            <param name="endRange">结束单元格</param>
            <param name="size">字体大小：12</param>
            <param name="name">字体名称：宋体</param>
            <param name="color">字体颜色：System.Drawing.Color.White</param>
            <param name="horizontalAlignment">文本水平对齐方式：HorizontalAlignType.Center</param>
            <param name="verticalAlignment">文本垂直对齐方式：VerticalAlignType.Center</param>
            <param name="bold">是否加粗</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellsBackColor(System.String,System.String,System.String,Spire.Xls.ExcelColors)">
            <summary>
            设置单元格背景色及填充方式
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="startRange">开始单元格</param>
            <param name="endRange">结束单元格</param>
            <param name="color">颜色索引：ExcelColors.Green</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SetCellsBorders(System.String,System.String,System.String,System.Int32)">
            <summary>
            设置单元格边框
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="startRange">开始单元格</param>
            <param name="endRange">结束单元格</param>
            <param name="lineStyle">边框</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.UniteCells(Spire.Xls.Worksheet,System.String,System.String)">
            <summary>
            合并单元格
            </summary>
            <param name="ws">工作表</param>
            <param name="startRange">开始单元格</param>
            <param name="endRange">结束单元格</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.UniteCells(System.String,System.String,System.String)">
            <summary>
            合并单元格
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="startRange">开始单元格</param>
            <param name="endRange">结束单元格</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.InsertTable(System.Data.DataTable,System.String,System.Int32,System.Int32)">
            <summary>
            将内存中数据表格插入到Excel指定工作表的指定位置 为在使用模板时控制格式时使用一
            </summary>
            <param name="dt">数据</param>
            <param name="wsn">工作表的名称</param>
            <param name="startX">开始x坐标</param>
            <param name="startY">开始y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.InsertTable(System.Data.DataTable,Spire.Xls.Worksheet,System.Int32,System.Int32)">
            <summary>
            将内存中数据表格插入到Excel指定工作表的指定位置二
            </summary>
            <param name="dt">数据</param>
            <param name="ws">工作表</param>
            <param name="startX">开始x坐标</param>
            <param name="startY">开始y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.InsertPictures(System.String,System.String,System.String)">
            <summary>
            插入图片操作一(在A1处插入图片)
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="filename">图片地址</param>
            <param name="pictureName">图片名称</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.InsertPictures(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            插入图片操作二
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="filename">图片地址</param>
            <param name="topRow">顶部x坐标</param>
            <param name="leftColumn">左部y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.InsertPictures(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            插入图片操作三
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="filename">图片地址</param>
            <param name="topRow">顶部x坐标</param>
            <param name="leftColumn">左部y坐标</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.Save">
            <summary>
            保存
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.SaveAs(System.String,Spire.Xls.ExcelVersion)">
            <summary>
            文档另存为
            </summary>
            <param name="fileName"></param>
            <param name="excelVersion">Excel版本</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.Close">
            <summary>
            关闭一个Excel对象，销毁对象
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.GetMaxCount(System.String)">
            <summary>
            获得最大行列数
            </summary>
            <param name="wsn">工作表的名称</param>
            <param name="rowsCount">最大行数</param>
            <param name="colsCount">最大列数</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.GetMaxRowsCount(System.String)">
            <summary>
            获得最大行数
            </summary>
            <param name="wsn">工作表的名称</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.GetMaxColsCount(System.String)">
            <summary>
            获得最大列数
            </summary>
            <param name="wsn">工作表的名称</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.GetCellsValue(System.String,System.Int32,System.Int32)">
            <summary>
            获得单元格文本
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="x">x坐标</param>
            <param name="y">y坐标</param>
        </member>
        <member name="M:DotNet.Utilities.SpireExcelHelper.GetCellsValue(System.String,System.String)">
            <summary>
            获得单元格文本
            </summary>
            <param name="wsn">工作表名称</param>
            <param name="range">单元格坐标</param>
        </member>
        <member name="T:DotNet.Utilities.SpireExcelHelper.SaveAsFileFormat">
            <summary>
            HTML，CSV，TEXT，EXCEL，XML
            </summary>
        </member>
        <member name="T:DotNet.Utilities.FileHelper">
            <summary>
            文件帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindFile(System.String)">
            <summary>
            获得目录下所有文件，不包括子目录
            </summary>
            <param name="dirPath">目录路径</param>
            <returns>完整路径集合</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindFile(System.String,System.String)">
            <summary>
            获得目录下指定后缀的文件，不包括子目录
            </summary>
            <param name="dirPath">目录路径</param>
            <param name="extension">指定要访问的文件的类型的扩展名，例：*.txt</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindAllFile(System.String)">
            <summary>
            获得目录下所有文件，包括全部目录
            </summary>
            <param name="dirPath">目录路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindAllFile(System.String,System.String)">
            <summary>
            获得目录下指定后缀的文件，包括全部目录
            </summary>
            <param name="dirPath">目录路径</param>
            <param name="extension">指定要访问的文件的类型的扩展名，例：*.txt</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.GetAll(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获得目录下指定后缀的文件
            </summary>
            <param name="dirPath">目录路径</param>
            <param name="extension">指定要访问的文件的类型的扩展名，例：*.txt</param>
            <param name="filePathList">文件路径集合</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindOneFile(System.String)">
            <summary>
            获得目录下所有文件，只包括一级目录
            </summary>
            <param name="dirPath">目录路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindOneFile(System.String,System.String)">
            <summary>
            获得目录下指定后缀的文件，只包括一级目录
            </summary>
            <param name="dirPath">目录路径</param>
            <param name="extension">指定要访问的文件的类型的扩展名，例：*.txt</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindDirectories(System.String)">
            <summary>
            获得目录下所有一级子目录
            </summary>
            <param name="dirPath">目录路径</param>
            <returns>目录集合</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindAllDirectories(System.String)">
            <summary>
            获得目录下所有子目录
            </summary>
            <param name="dirPath">目录路径</param>
            <returns>目录集合</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FindAllDirectories(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            获得目录下所有子目录
            </summary>
            <param name="dirPath">目录路径</param>
            <param name="filePathList">文件路径集合</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.DeleteFolder(System.String)">
            <summary>
            清空指定的文件夹，但不删除文件夹
            </summary>
            <param name="dirPath">目录路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.DeleteFolder(System.String,System.Boolean)">
            <summary>
            删除目录及其内容
            </summary>
            <param name="dirPath">目录路径</param>
            <param name="recursive">是否删除根目录</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.CopyDir(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面，目标文件夹为只读属性就会报错。
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.Create(System.String)">
            <summary>
            创建文件
            </summary>
            <param name="path">文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.WriteFile(System.String,System.String,System.String)">
            <summary>
            写文件，如果文件不存在则创建，存在则覆盖
            </summary>
            <param name="path">文件路径</param>
            <param name="strings">文件内容</param>
            <param name="encod">编码，默认utf-8</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.WriteFile2(System.String,System.String,System.String)">
            <summary>
            写文件，如果文件不存在则创建，存在则追加
            </summary>
            <param name="path">文件路径</param>
            <param name="strings">内容</param>
            <param name="encod">编码，默认utf-8</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.ReadFile(System.String,System.String)">
            <summary>
            读文件
            </summary>
            <param name="path">文件路径</param>
            <param name="encod">编码，默认utf-8</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.DirectoryCreate(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dir">目录</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FileCreate(System.String)">
            <summary>
            创建文件
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FileCoppy(System.String,System.String)">
            <summary>
            拷贝文件，如果目标文件存在则覆盖
            </summary>
            <param name="orignFile">原始文件</param>
            <param name="newFile">新文件路径</param>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.GetPostfixStr(System.String)">
            <summary>
            取文件后缀名
            </summary>
            <param name="filename">文件名（或路径）</param>
            <returns>后缀，如：.gif|.html格式</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.DirectoryLegality(System.String)">
            <summary>
            判断目录是否合法
            </summary>
            <param name="dir">目录</param>
            <returns>true合法</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.GetDirectoryLength(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="dirPath">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.GetFileAttibe(System.String)">
            <summary>
            获取指定文件详细属性
            </summary>
            <param name="filePath">文件详细路径</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.GetFileEncodeType(System.String)">
            <summary>
            判断文件编码
            </summary>
            <param name="path">文件路径</param>
            <returns>编码</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.SearchFile(System.String,System.String)">
            <summary>
            模糊搜索文件
            </summary>
            <param name="dirPath">文件夹目录</param>
            <param name="sea">搜索的关键词</param>
            <returns>所有文件路径</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FilePathProcess(System.String)">
            <summary>
            文件路径处理
            </summary>
            <param name="filePath">文件路径</param>
            <returns>去除了特殊字符的文件名的文件路径</returns>
        </member>
        <member name="M:DotNet.Utilities.FileHelper.FileNameProcess(System.String)">
            <summary>
            文件名处理
            </summary>
            <param name="fileName">文件名</param>
            <returns>去除了特殊字符的文件名</returns>
        </member>
        <member name="T:DotNet.Utilities.HttpHelper">
            <summary>
            获得http信息
            </summary>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.GetHttpWebRequest(System.String,System.String)">
            <summary>
            GetHttpWebRequest方式获得html，推荐
            </summary>
            <param name="url">网址</param>
            <param name="chareset">编码</param>
            <c>！注意：有时候请求会重定向，但我们就需要从重定向url获取东西，像QQ登录成功后获取sid，但上面的会自动根据重定向地址跳转。我们可以用:
                request.AllowAutoRedirect = false;设置重定向禁用，你就可以从headers的Location属性中获取重定向地址</c>
            <returns>html代码</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.PostHttpWebRequest(System.String,System.String)">
            <summary>
            PostHttpWebRequest方式获得html，推荐
            </summary>
            <param name="url">网址</param>
            <param name="chareset">编码</param>
            <c>在post的时候有时也用的到cookie，像登录163发邮件时候就需要发送cookie，所以在外部一个cookie属性随时保存 CookieContainer cookie = new CookieContainer();</c>
            <returns>html代码</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.GetWebRequest(System.String,System.String)">
            <summary>
            GetWebRequest方式获得html
            </summary>
            <param name="url">网址</param>
            <param name="chareset">编码</param>
            <returns>html代码</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.GetWebClient(System.String,System.String)">
            <summary>
            GetWebClient方式获得html
            </summary>
            <param name="url">网址</param>
            <param name="chareset">编码</param>
            <returns>html代码</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.HttpPostRequest(System.String,System.String,System.String,System.Collections.Hashtable,System.Net.CookieContainer)">
            <summary>
            http POST 请求
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">请求主体</param>
            <param name="chareset">编码，默认utf-8</param>
            <param name="headerItem"></param>
            <param name="cookies">cookie容器</param>
            <returns>响应的页面, 响应的cookie</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.HttpPostRequest(System.String,System.String,System.String,System.Collections.Hashtable,System.String)">
            <summary>
            http POST 请求
            </summary>
            <param name="url">请求地址</param>
            <param name="postDataStr">请求主体</param>
            <param name="chareset">编码，默认utf-8</param>
            <param name="headerItem"></param>
            <param name="cookie">cookie容器</param>
            <returns>响应的页面, 响应的cookie</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.HttpGetRequest(System.String,System.String,System.String,System.Collections.Hashtable,System.Net.CookieContainer)">
            <summary>
            http GET 请求
            </summary>
            <param name="url">请求地址</param>
            <param name="getDataStr">请求内容</param>
            <param name="chareset">编码，默认utf-8</param>
            <param name="headerItem">请求头</param>
            <param name="cookies">cookie容器</param>
            <returns>响应的页面, 响应的cookie</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.HttpGetRequest(System.String,System.String,System.String,System.Collections.Hashtable,System.String)">
            <summary>
            http GET 请求
            </summary>
            <param name="url">请求地址</param>
            <param name="getDataStr">请求内容</param>
            <param name="chareset">编码，默认utf-8</param>
            <param name="headerItem">请求头</param>
            <param name="cookie">cookie容器</param>
            <returns>响应的页面</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.FormatHtml(System.String)">
            <summary>
            描述:格式化网页源码
            </summary>
            <param name="htmlContent"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.HttpUploadFile(System.String,System.String,System.String,System.Collections.Hashtable,System.String)">
            <summary> 
            上传图片文件 
            </summary> 
            <param name="url">提交的地址</param> 
            <param name="fileformname">文本域的名称  比如：name="file"，那么fileformname=file  </param> 
            <param name="filepath">上传的文件路径  比如： c:\12.jpg </param> 
            <param name="headerItem">header</param> 
            <param name="cookie">cookie数据</param> 
            <returns>响应源码</returns> 
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.BaiduSearch(System.String,System.Int32)">
            <summary>
            百度搜索
            </summary>
            <param name="seo">关键词</param>
            <param name="num">搜索条数</param>
            <returns>html代码</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.BaiduMSearch(System.String,System.Int32)">
            <summary>
            手机百度搜索
            </summary>
            <param name="seo">关键词</param>
            <param name="num">搜索条数</param>
            <returns>html代码</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.BaiduURLDecrypt(System.String)">
            <summary>
            百度url解密
            </summary>
            <param name="url">百度url</param>
            <returns>真实url</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.GetCookieContainer(System.String,System.String)">
            <summary>
            获得cookie容器
            </summary>
            <param name="url">url</param>
            <param name="cookie">cookie字符串</param>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.HttpWebRequest(System.String,System.String,System.String)">
            <summary>
            HttpWebRequest方式获得html，推荐
            </summary>
            <param name="url">网址</param>
            <param name="qequest">请求方法，GET、POST</param>
            <param name="chareset">编码</param>
            <c>！注意：有时候请求会重定向，但我们就需要从重定向url获取东西，像QQ登录成功后获取sid，但上面的会自动根据重定向地址跳转。我们可以用:
                request.AllowAutoRedirect = false;设置重定向禁用，你就可以从headers的Location属性中获取重定向地址</c>
            <returns>html代码</returns>
        </member>
        <member name="M:DotNet.Utilities.HttpHelper.HttpRequest(System.String,System.String,System.String,System.String,System.Collections.Hashtable,System.Net.CookieContainer,System.String)">
            <summary>
            http 请求
            </summary>
            <param name="url">请求地址</param>
            <param name="qequest">请求方法，GET、POST</param>
            <param name="dataStr">请求主体</param>
            <param name="chareset">编码，默认utf-8</param>
            <param name="headerItem"></param>
            <param name="cookies">cookie容器</param>
            <param name="cookie">cookie</param>
            <returns>响应的页面, 响应的cookie</returns>
        </member>
        <member name="T:DotNet.Utilities.PubUbbFunc">
            <summary>
            html与ubb
            </summary>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.TextBoxToHtml(System.String)">
            <summary>
            多行文本框前台页面HMTL显示
            </summary>
            <param name="sDetail"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.EditorContentToHtml(System.String)">
            <summary>
            编辑器中内容前台页面显示全部内容(要求有HTML标签)
            </summary>
            <param name="sDetail"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.EditorContentDelHtml(System.String)">
            <summary>
            编辑器中内容前台页面显示部分内容（去掉全部的HTML标签）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.EditorContentDelImg(System.String)">
            <summary>
            编辑器中内容前台页面显示部分内容（去掉全部的Img标签）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.HtmlToTextBox(System.String)">
            <summary>
            前台页面多行文本框显示
            </summary>
            <param name="sDetail"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.GetHtmlImageUrlList(System.String)">
            <summary>
            取得HTML中所有图片的 URL。
            </summary>
            <param name="sHtmlText">HTML代码</param>
            <returns>图片的URL列表</returns>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.ReplaceChar(System.String)">
            <summary>
            html特殊字符转义
            </summary>
            <param name="data"></param>
            <returns>转义字符</returns>
        </member>
        <member name="M:DotNet.Utilities.PubUbbFunc.ReplaceCharBack(System.String)">
            <summary>
            html转义字符转特殊字符
            </summary>
            <param name="data"></param>
            <returns>特殊字符</returns>
        </member>
        <member name="T:DotNet.Utilities.Shell">
            <summary>
            与控制台交互
            </summary>
        </member>
        <member name="M:DotNet.Utilities.Shell.AllocConsole">
            <summary>
            显示控制台
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Shell.FreeConsole">
            <summary>
            关闭控制台
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLine(System.String,System.Object[])">
            <summary>
            换行输出，带时间
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLine(System.String)">
            <summary>
            换行输出，带时间输出信息
            </summary>
            <param name="output"></param>
            <example>例：Shell.WriteLine("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLine2(System.String,System.Object[])">
            <summary>
            换行输出，不带时间
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLine2(System.String)">
            <summary>
            换行输出，不带时间
            </summary>
            <param name="output"></param>
            <example>例：Shell.WriteLine("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.Write(System.String,System.Object[])">
            <summary>
            不换行输出，不带时间
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.Write(System.String)">
            <summary>
            不换行输出，不带时间
            </summary>
            <param name="output"></param>
            <example>例：Shell.WriteLine("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLineWarning(System.String,System.Object[])">
            <summary>
            换行输出警告信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLineError(System.String,System.Object[])">
            <summary>
            换行输出错误信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLineAttention(System.String,System.Object[])">
            <summary>
            换行输出注意信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLineWarning(System.String)">
            <summary>
            换行输出警告信息
            </summary>
            <param name="output"></param>
            <example>例：Shell.Write("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLineError(System.String)">
            <summary>
            换行输出错误
            </summary>
            <param name="output"></param>
            <example>例：Shell.Write("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteLineAttention(System.String)">
            <summary>
            换行输出注意信息
            </summary>
            <param name="output"></param>
            <example>例：Shell.Write("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteWarning(System.String,System.Object[])">
            <summary>
            不换行输出，不带时间（警告）
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteError(System.String,System.Object[])">
            <summary>
            不换行输出，不带时间（错误）
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteAttention(System.String,System.Object[])">
            <summary>
            不换行输出，不带时间（注意）
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <example>例：Shell.WriteLine("{0}：{1}", "警告", "这是一条警告信息。");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteWarning(System.String)">
            <summary>
            不换行输出，不带时间（警告）
            </summary>
            <param name="output"></param>
            <example>例：Shell.Write("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteError(System.String)">
            <summary>
            不换行输出，不带时间（错误）
            </summary>
            <param name="output"></param>
            <example>例：Shell.Write("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.WriteAttention(System.String)">
            <summary>
            不换行输出，不带时间（注意）
            </summary>
            <param name="output"></param>
            <example>例：Shell.Write("注意：2秒后关闭...");</example>
        </member>
        <member name="M:DotNet.Utilities.Shell.GetConsoleColor(System.String)">
            <summary>
            根据输出文本选择控制台文字颜色
            </summary>
            <param name="output"></param>
            <returns></returns>  
        </member>
        <member name="T:DotNet.Utilities.StringBuilderExtensions">
            <summary>
            StringBuilder 扩展类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StringBuilderExtensions.AppendSpace(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            向此实例追加指定字符串的副本。
            </summary>
            <param name="sb"></param>
            <param name="spaceNum">空格数</param>
            <param name="text">要追加的字符串</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringBuilderExtensions.AppendSpaceLine(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            将后面跟有默认行终止符的指定字符串的副本追加到当前 StringBuilder 对象的末尾
            </summary>
            <param name="sb"></param>
            <param name="spaceNum">空格数</param>
            <param name="text">要追加的字符串</param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.StringHelper">
            <summary>
            字符串帮助类
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StringHelper.LCS(System.String,System.String)">
            <summary>
            查找两个字符串最长的公共子串(LongestCommonSequence)
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.StringExtensions">
            <summary>
            string 扩展方法
            </summary>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.ValidateCharLength(System.String,System.Int32)">
            <summary>
            验证字符串个数是否超出指定长度
            </summary>
            <param name="inputstr">被检验的字符串</param>
            <param name="count">指定的长度</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.CutString(System.String,System.Int32,System.Boolean)">
            <summary>
            截取指定长度的字符串
            </summary>
            <param name="inputString">被处理的字符串</param>
            <param name="len">要求截取的长度</param>
            <param name="flag">截取后是否显示省略号,flag为true显示…，为false不显示，默认不显示</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.SqlFilter(System.String)">
            <summary>
            过滤Sql查询关键词中的敏感词汇
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.SplitLeft(System.String,System.Int32)">
            <summary>
            获取左边指定位数的字符串
            </summary>
            <param name="value">字符串</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.SplitRight(System.String,System.Int32)">
            <summary>
            获取右边指定位数的字符串
            </summary>
            <param name="value">字符串</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.SplitLeft(System.String,System.String)">
            <summary>
            获取拆分符左边的字符串
            </summary>
            <param name="value"></param>
            <param name="split">拆分符</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.SplitRight(System.String,System.String)">
            <summary>
            获取拆分符右边的字符串
            </summary>
            <param name="value"></param>
            <param name="split">拆分符</param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.RemoveEmpty(System.String)">
            <summary>
            删除不可见字符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.RemoveEmptyRow(System.String)">
            <summary>
            过滤文本中的空行
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.GetStringCount(System.String[],System.String)">
            <summary>
            获取字符串在数组中累计出现的次数
            </summary>
            <param name="stringArray"></param>
            <param name="findString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.GetStringCount(System.String,System.String)">
            <summary>
            获取字符串在字符串累计出现的次数
            </summary>
            <param name="value"></param>
            <param name="findString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.GetSubString(System.String,System.String)">
            <summary>
            截取从startString开始到结尾的字符
            </summary>
            <param name="value"></param>
            <param name="startString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.GetSubString(System.String,System.String,System.String)">
            <summary>
            截取从startString开始到endString的字符
            </summary>
            <param name="value"></param>
            <param name="startString"></param>
            <param name="endString"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.ToSbc(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.ToDbc(System.String)">
             <summary> 转半角的函数(DBC case) </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.ToNumber(System.String)">
            <summary>
            提取出所有数字，并转换为int
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.ToDateTime(System.String)">
            <summary>
            转换成时间类型，失败则得到最小时间
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:DotNet.Utilities.StringExtensions.ToDateTime(System.String,System.IFormatProvider)">
            <summary>
            转换成时间类型，失败则得到最小时间
            </summary>
            <param name="s"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.SystemHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotNet.Utilities.SystemHelper.CheckPort(System.String)">
            <summary>
            检测端口号
            </summary>
            <param name="tempPort">端口号</param>
            <remarks>http://blog.csdn.net/jayzai/article/details/8182418</remarks>
            <returns></returns>
        </member>
        <member name="T:DotNet.Utilities.Pi">
            <summary>
            用一组反正切展式表示圆周率 
            </summary>
        </member>
        <member name="T:DotNet.Utilities.ThreadPoolHelper">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotNet.Utilities.ThreadPoolHelper.ThreadPoolEndFlag">
            <summary>
            线程池全部结束标志，结束为true
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ThreadPoolHelper.BeginThreadPool">
            <summary>
            开始线程池
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ThreadPoolHelper.BeginThreadPool(System.Int32,System.Int32)">
            <summary>
            开始线程池
            </summary>
            <param name="minThreads">最小线程数</param>
            <param name="maxThreads">最大线程数</param>
        </member>
        <member name="M:DotNet.Utilities.ThreadPoolHelper.CheckThreadPool">
            <summary>
            开始检查线程池
            </summary>
        </member>
        <member name="M:DotNet.Utilities.ThreadPoolHelper.CheckThreadPool(System.Object,System.Boolean)">
            <summary>
            检查线程池的方法
            </summary>
            <param name="state"></param>
            <param name="timeout"></param>
        </member>
        <member name="T:DotNet.Utilities.ImagePosition">
            <summary>   
            图片位置   
            </summary>   
        </member>
        <member name="T:DotNet.Utilities.WaterImageManage">
            <summary>   
            水印图片的操作管理 Design by Gary Gong From Demetersoft.com   
            </summary>   
        </member>
        <member name="M:DotNet.Utilities.WaterImageManage.#ctor">
            <summary>   
            生成一个新的水印图片制作实例   
            </summary>   
        </member>
        <member name="M:DotNet.Utilities.WaterImageManage.DrawImage(System.String,System.String,System.Single,DotNet.Utilities.ImagePosition,System.String)">
            <summary>   
            添加图片水印   
            </summary>   
            <param name="sourcePicture">源图片文件名</param>   
            <param name="waterImage">水印图片文件名</param>   
            <param name="alpha">透明度(0.1-1.0数值越小透明度越高)</param>   
            <param name="position">位置</param>   
            <param name="PicturePath" >图片的路径</param>   
            <returns>返回生成于指定文件夹下的水印文件名</returns>   
        </member>
        <member name="M:DotNet.Utilities.WaterImageManage.DrawWords(System.String,System.String,System.Single,DotNet.Utilities.ImagePosition,System.String)">
            <summary>   
            在图片上添加水印文字   
            </summary>   
            <param name="sourcePicture">源图片文件</param>   
            <param name="waterWords">需要添加到图片上的文字</param>   
            <param name="alpha">透明度</param>   
            <param name="position">位置</param>   
            <param name="PicturePath">文件路径</param>   
            <returns></returns>   
        </member>
        <member name="T:DotNet.Utilities.WaterImage">
            <summary>   
            装载水印图片的相关信息   
            </summary>   
        </member>
        <member name="P:DotNet.Utilities.WaterImage.SourcePicture">
            <summary>   
            源图片地址名字(带后缀)   
            </summary>   
        </member>
        <member name="P:DotNet.Utilities.WaterImage.WaterPicture">
            <summary>   
            水印图片名字(带后缀)   
            </summary>   
        </member>
        <member name="P:DotNet.Utilities.WaterImage.Alpha">
            <summary>   
            水印图片文字的透明度   
            </summary>   
        </member>
        <member name="P:DotNet.Utilities.WaterImage.Position">
            <summary>   
            水印图片或文字在图片中的位置   
            </summary>   
        </member>
        <member name="P:DotNet.Utilities.WaterImage.Words">
            <summary>   
            水印文字的内容   
            </summary>   
        </member>
        <member name="T:DotNet.Utilities.WriteLog">
            <summary>
            输出log
            </summary>
        </member>
        <member name="M:DotNet.Utilities.WriteLog.WriteError(System.Exception)">
            <summary>
            将异常打印到LOG文件
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="M:DotNet.Utilities.WriteLog.WriteError(System.Exception,System.String)">
            <summary>
            将异常打印到LOG文件
            </summary>
            <param name="ex">异常</param>
            <param name="tag">传入标签（这里用于标识函数由哪个线程调用）</param>
        </member>
    </members>
</doc>
